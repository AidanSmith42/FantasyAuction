ggplotly(ggplot(t) + geom_point(stat="identity", aes(Pick, Value), color="steelblue4", size = 2) + geom_line(aes(Pick, Value), color="steelblue4")+
#geom_text(aes(x=Pick, y= Value, label=round(Value,1)), position=position_dodge(width=0.9),  size =7.5)   +
scale_x_continuous(breaks = seq(1, 12, by = 1)) + theme_economist() + ggtitle("Average Snake Pick Value Top 2 (2009-2019)") +
theme(plot.title = element_text(hjust = 0.5)))
t$Value
Values <- numeric()
for(i in 1:33)
{
Values[i] <- median(as.numeric(x[i,]))
}
Values[34:72] <- seq(50,1,-(50)/(72-34))
Values
Values <- numeric()
for(i in 1:33)
{
Values[i] <- median(as.numeric(x[i,]))
}
Values[34:73] <- seq(50,1,-(50)/(72-34))
Values
Values <- numeric()
for(i in 1:33)
{
Values[i] <- median(as.numeric(x[i,]))
}
Values[34:75] <- seq(50,1,-(50)/(72-34))
Values
Values <- numeric()
for(i in 1:33)
{
Values[i] <- median(as.numeric(x[i,]))
}
length(seq(50,1,-(50)/(72-34)))
Values[34:72] <- seq(50,1,-(50)/(72-34))
Values
Values <- numeric()
for(i in 1:33)
{
Values[i] <- median(as.numeric(x[i,]))
}
Values[34:71] <- seq(50,1,-(50)/(72-34))
t$Pick <- 1:12
t$Value[1] <- Values[1] + Values[24] + Values[25] + Values[48] + Values[49]
t$Value[2] <- Values[2] + Values[23] + Values[26] + Values[47] + Values[50]
t$Value[3] <- Values[3] + Values[22] + Values[27] + Values[46] + Values[51]
t$Value[4] <- Values[4] + Values[21] + Values[28] + Values[45] + Values[52]
t$Value[5] <- Values[5] + Values[20] + Values[29] + Values[44] + Values[53]
t$Value[6] <- Values[6] + Values[19] + Values[30] + Values[43] + Values[54]
t$Value[7] <- Values[7] + Values[18] + Values[31] + Values[42] + Values[55]
t$Value[8] <- Values[8] + Values[17] + Values[32] + Values[41] + Values[56]
t$Value[9] <- Values[9] + Values[16] + Values[33] + Values[40] + Values[57]
t$Value[10] <- Values[10] + Values[15] + Values[34] + Values[39] + Values[58]
t$Value[11] <- Values[11] + Values[14] + Values[35] + Values[38] + Values[59]
t$Value[12] <- Values[12] + Values[13] + Values[36] + Values[37] + Values[60]
ggplotly(ggplot(t) + geom_point(stat="identity", aes(Pick, Value), color="steelblue4", size = 2) + geom_line(aes(Pick, Value), color="steelblue4")+
#geom_text(aes(x=Pick, y= Value, label=round(Value,1)), position=position_dodge(width=0.9),  size =7.5)   +
scale_x_continuous(breaks = seq(1, 12, by = 1)) + theme_economist() + ggtitle("Average Snake Pick Value Top 2 (2009-2019)") +
theme(plot.title = element_text(hjust = 0.5)))
Values[c(8,17,32,41,56)]
Values[41]
Values[42]
Values[40]
VAlues
VAlues
Values
Values <- numeric()
for(i in 1:33)
{
Values[i] <- median(as.numeric(x[i,]))
}
Values[30:71] <- seq(50,1,-(50)/(72-30))
t$Pick <- 1:12
t$Value[1] <- Values[1] + Values[24] + Values[25] + Values[48] + Values[49]
t$Value[2] <- Values[2] + Values[23] + Values[26] + Values[47] + Values[50]
t$Value[3] <- Values[3] + Values[22] + Values[27] + Values[46] + Values[51]
t$Value[4] <- Values[4] + Values[21] + Values[28] + Values[45] + Values[52]
t$Value[5] <- Values[5] + Values[20] + Values[29] + Values[44] + Values[53]
t$Value[6] <- Values[6] + Values[19] + Values[30] + Values[43] + Values[54]
t$Value[7] <- Values[7] + Values[18] + Values[31] + Values[42] + Values[55]
t$Value[8] <- Values[8] + Values[17] + Values[32] + Values[41] + Values[56]
t$Value[9] <- Values[9] + Values[16] + Values[33] + Values[40] + Values[57]
t$Value[10] <- Values[10] + Values[15] + Values[34] + Values[39] + Values[58]
t$Value[11] <- Values[11] + Values[14] + Values[35] + Values[38] + Values[59]
t$Value[12] <- Values[12] + Values[13] + Values[36] + Values[37] + Values[60]
ggplotly(ggplot(t) + geom_point(stat="identity", aes(Pick, Value), color="steelblue4", size = 2) + geom_line(aes(Pick, Value), color="steelblue4")+
#geom_text(aes(x=Pick, y= Value, label=round(Value,1)), position=position_dodge(width=0.9),  size =7.5)   +
scale_x_continuous(breaks = seq(1, 12, by = 1)) + theme_economist() + ggtitle("Average Snake Pick Value Top 2 (2009-2019)") +
theme(plot.title = element_text(hjust = 0.5)))
Values[c(8,17,32,41,56)]
Values[15:20]
Values[17] <- 55
t$Value[8] <- Values[8] + Values[17] + Values[32] + Values[41] + Values[56]
ggplotly(ggplot(t) + geom_point(stat="identity", aes(Pick, Value), color="steelblue4", size = 2) + geom_line(aes(Pick, Value), color="steelblue4")+
#geom_text(aes(x=Pick, y= Value, label=round(Value,1)), position=position_dodge(width=0.9),  size =7.5)   +
scale_x_continuous(breaks = seq(1, 12, by = 1)) + theme_economist() + ggtitle("Average Snake Pick Value Top 2 (2009-2019)") +
theme(plot.title = element_text(hjust = 0.5)))
df
x
Values <- numeric()
for(i in 1:33)
{
Values[i] <- mean(as.numeric(x[i,]), trim .2)
}
Values <- numeric()
for(i in 1:33)
{
Values[i] <- mean(as.numeric(x[i,]), trim .2)
}
Values <- numeric()
for(i in 1:33)
{
Values[i] <- mean(as.numeric(x[i,]), trim=.2)
}
Values
Values <- numeric()
for(i in 1:33)
{
Values[i] <- mean(as.numeric(x[i,]), trim=.3)
}
Values
trimcibt(x,tr=.2,alpha=.05,nboot=599)
library(boot)
x[1,]
boot(x[1,])
boot(x[1,], 200)
boot(x[1,], mean(x[1,], trim=.2), 200)
boot(x[1,] %>% as.numeric(), mean(x[1,]) %>% as.numeric(), 200)
boot(x[1,] %>% as.numeric(), mean(x[1,] %>% as.numeric()) , 200)
# Usual bootstrap of the ratio of means using the city dataratio <- function(d, w) sum(d$x * w)/sum(d$u * w)boot(city, ratio, R = 999, stype = "w")
ratio <- function(d, w) sum(d$x * w)/sum(d$u * w)
boot(city, ratio, R = 999, stype = "w")
city
x
Values <- numeric()
for(i in 1:33)
{
Values[i] <- mean(as.numeric(x[i,]), trim=.40)
}
Values
Values <- numeric()
for(i in 1:33)
{
Values[i] <- mean(as.numeric(x[i,]), trim=.40)
print(median(as.numeric(x[i,])))
}
Values <- numeric()
Vtest <- numeric()
for(i in 1:33)
{
Values[i] <- mean(as.numeric(x[i,]), trim=.40)
Vtest[i] <- (median(as.numeric(x[i,])))
}
Values
Vtest
Values <- numeric()
Vtest <- numeric()
for(i in 1:33)
{
Values[i] <- mean(as.numeric(x[i,]), trim=.33)
Vtest[i] <- (median(as.numeric(x[i,])))
}
Values
Vtest
Values <- numeric()
Vtest <- numeric()
for(i in 1:33)
{
Values[i] <- mean(as.numeric(x[i,]), trim=.25)
Vtest[i] <- (median(as.numeric(x[i,])))
}
Values
Values <- numeric()
Vtest <- numeric()
for(i in 1:33)
{
Values[i] <- mean(as.numeric(x[i,]), trim=.30)
Vtest[i] <- (median(as.numeric(x[i,])))
}
Values
Values[17] <- 55
Values[30:71] <- seq(50,1,-(50)/(72-30))
Values <- numeric()
for(i in 1:33)
{
Values[i] <- mean(as.numeric(x[i,]), trim=.30)
}
Values[17]
Values[17] <- 55
Values[28:71] <- seq(45,1,-(45)/(72-28))
t$Pick <- 1:12
t$Value[1] <- Values[1] + Values[24] + Values[25] + Values[48] + Values[49]
t$Value[2] <- Values[2] + Values[23] + Values[26] + Values[47] + Values[50]
t$Value[3] <- Values[3] + Values[22] + Values[27] + Values[46] + Values[51]
t$Value[4] <- Values[4] + Values[21] + Values[28] + Values[45] + Values[52]
t$Value[5] <- Values[5] + Values[20] + Values[29] + Values[44] + Values[53]
t$Value[6] <- Values[6] + Values[19] + Values[30] + Values[43] + Values[54]
t$Value[7] <- Values[7] + Values[18] + Values[31] + Values[42] + Values[55]
t$Value[9] <- Values[9] + Values[16] + Values[33] + Values[40] + Values[57]
t$Value[8] <- Values[8] + Values[17] + Values[32] + Values[41] + Values[56]
t$Value[10] <- Values[10] + Values[15] + Values[34] + Values[39] + Values[58]
t$Value[11] <- Values[11] + Values[14] + Values[35] + Values[38] + Values[59]
t$Value[12] <- Values[12] + Values[13] + Values[36] + Values[37] + Values[60]
#t$Value[1] <- 143
#t$Value[12] <- t$Value[8] - 35
#t$Value[8] <- 115.5
#t$Value[11] <- 113.5
#t$Value[10] <- 109
ggplot(TeamValue) + geom_bar(stat="identity", aes(Pick, Value), fill="steelblue4") +
geom_text(aes(x=Pick, y= Value, label=round(Value,1)), position=position_dodge(width=0.9), vjust=-0.25, size =3.5)   +
scale_x_continuous(breaks = seq(1, 12, by = 1)) + theme_economist() + ggtitle("Average Team Value by Snake Draft Pick (2014-2019)") +
theme(plot.title = element_text(hjust = 0.5))
ggplotly(ggplot(t) + geom_point(stat="identity", aes(Pick, Value), color="steelblue4", size = 2) + geom_line(aes(Pick, Value), color="steelblue4")+
#geom_text(aes(x=Pick, y= Value, label=round(Value,1)), position=position_dodge(width=0.9),  size =7.5)   +
scale_x_continuous(breaks = seq(1, 12, by = 1)) + theme_economist() + ggtitle("Average Snake Pick Value Top 2 (2009-2019)") +
theme(plot.title = element_text(hjust = 0.5)))
ggplotly(ggplot(t) + geom_point(stat="identity", aes(Pick, Value), color="steelblue4", size = 2) + geom_line(aes(Pick, Value), color="steelblue4")+
#geom_text(aes(x=Pick, y= Value, label=round(Value,1)), position=position_dodge(width=0.9),  size =7.5)   +
scale_x_continuous(breaks = seq(1, 12, by = 1)) + theme_economist() + ggtitle("Average Snake Pick Value (2009-2019)") +
theme(plot.title = element_text(hjust = 0.5)))
176*1.10
176*1.30
176*1.50
176*1.40
176*1.45
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
deployApp()
runApp()
library(rsconnect)
rsconnect::setAccountInfo(name='fantasyauction', token='2EA9570CE8F64754D9B0C445282328D6', secret='YL39omn1eewH6paMrxDQ9b7obUCELRPTsyvk7VRN')
deployApp()
deployApp()
shiny::runApp()
runApp()
runApp()
runApp()
input$upload
runApp()
runApp()
input$upload != 0
input$upload == 0
runApp()
runApp()
c( 1, input$QB, input$RB, input$TE, input$WR, (input$FLEX + input$WR + input$RB))
runApp()
f.con
nrow(f.con)
3:7
runApp()
runApp()
deployApp()
runApp()
runApp()
runApp()
runApp()
runApp()
fread(input$file1$datapath) %>% na.omit() %>% as.data.frame()
runApp()
runApp()
8-2
runApp()
runApp()
deployApp()
library(readr)
test <- read_csv("C:/Users/Aidan/Desktop/Files/squad/New folder/test.csv")
View(test)
library(readr)
FantasyProsProjections <- read_csv("FantasyProsProjections.csv")
View(FantasyProsProjections)
left_join(FantasyProsProjections, test)
data <- left_join(FantasyProsProjections, test)
data
View(data)
data[60,] <- c('Pittsburgh', 120.6, 'D', 1.11, 1.0)
fwrite(data, "DataProj.csv")
fread("DataProj.csv") %>% na.omit() %>% as.data.frame()
runApp()
runApp()
Position.Mat
dat
runApp()
runApp()
deployApp()
runApp()
deployApp()
library(readr)
ppr <- read_csv("C:/Users/Aidan/Desktop/ppr.csv")
View(ppr)
library(readr)
standard <- read_csv("C:/Users/Aidan/Desktop/standard.csv")
View(standard)
View(data)
left_join(data, standard)
standard
data
left_join(data, standard %>% na.omit())
names(standard)[1] <- 'Name'
names(ppr)[1] <- 'Name'
left_join(data, standard)
data <- left_join(data, standard %>% na.omit())
data
data <- left_join(data, standard)
data
standard %>% na.omit()
standard %>% select(Name, Standard)
data <- left_join(data, standard %>% select(Name, Standard))
data
data <- left_join(data, standard %>% select(Name, Standard), by='Name')
data
data <- fread("DataProj.csv")
dat
data
data <- left_join(data, standard %>% select(Name, Standard), by='Name')
data
data <- left_join(data, ppr %>% select(Name, PPR), by='Name')
data
fwrite(data, "DataProj.csv")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(dat)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
input$Scoring
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
picks
runApp()
runApp()
PlayerValue <- round(PlayerValue$Points/input$Salary,2)
PlayerValue
dat
input$Player
dat %>% filter(Name == input$Player)
runApp()
runApp()
runApp()
runApp()
runApp()
dat2
runApp()
dat2
team$Pos
f.obj <- fd[, "Points"]
runApp()
runApp()
Positions
Position.Mat
fd
if("QB" %in% team$Pos){
dat2<<- dat2 %>% filter(Position != 'QB')
Positions <- Positions[!grepl("QB", Positions)]
countQB <- countQB + 1
mat <- mat[Positions]
}
runApp()
fd
dat2
dat2 %>% filter(Position != 'QB')
"QB" %in% team$Pos
runApp()
dat2
dat2<<- dat2 %>% filter(Position != 'QB')
dat2
dat2 %>% filter(Position != 'QB')
runApp()
dat2
dat2<- dat2 %>% filter(Position != 'QB')
dat2
runApp()
runApp()
runApp()
picks2
dat2
runApp()
runApp()
dat2
runApp()
runApp()
Player <- c( input$Position, input$Player, as.numeric(input$Salary), PlayerValue)
Player
PlayerValue
dat %>% filter(Name == input$Player)
runApp()
runApp()
deployApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
dat2
dat2 %>% filter(Name != input$Player)
runApp()
dat
dat2
runApp()
runApp()
deployApp()
library(XML)
library(RCurl)
library(rlist)
library(tidyverse)
r <- getURL(paste0("https://football.fantasysports.yahoo.com/f1/draftanalysis?tab=AD&pos=ALL&sort=DA_AP"))
tables <- readHTMLTable(r)
tables <- list.clean(tables, fun = is.null, recursive=F)
tab <- as.data.frame(tables)
names(tab) <- c("Name", "Proj", "Avg", "drop")
tab <- tab %>% select(-("drop"))
tab$Proj <- as.numeric(gsub("\\$", "",as.character(tab$Proj)))
tab$Avg <- as.numeric(gsub("\\$", "",as.character(tab$Avg)))
test <- tables$draftanalysistable$Name
start <- gregexpr('\n', test) %>% unlist()
start <- start[seq(1,length(start), 5)]
stop <- gregexpr('- ', test) %>% as.numeric()
x <- strsplit(substring(test, start+2, stop+3) %>% trimws(), " ")
lastNames <- character()
position <- character()
team <- character()
for(i in 1:50){
lastNames[i] <- x[[i]][2]
position[i] <- x[[i]][length(x[[i]])]
team[i] <- x[[i]][(length(x[[i]])-2)]
}
df <- data.frame("Name" = lastNames, "Pos" = position,'Team'=toupper(team), "Proj" = tab$Proj, "AvgCost"= tab$Avg)
r <- getURL(paste0("https://football.fantasysports.yahoo.com/f1/draftanalysis?tab=AD&pos=ALL&sort=DA_AP&count=50"))
tables <- readHTMLTable(r)
tables <- list.clean(tables, fun = is.null, recursive=F)
tab <- as.data.frame(tables)
names(tab) <- c("Name", "Proj", "Avg", "drop")
tab <- tab %>% select(-("drop"))
tab$Proj <- as.numeric(gsub("\\$", "",as.character(tab$Proj)))
tab$Avg <- as.numeric(gsub("\\$", "",as.character(tab$Avg)))
test <- tables$draftanalysistable$Name
start <- gregexpr('\n', test) %>% unlist()
start <- start[seq(1,length(start), 5)]
stop <- gregexpr('- ', test) %>% as.numeric()
x <- strsplit(substring(test, start+2, stop+3) %>% trimws(), " ")
lastNames <- character()
position <- character()
team <- character()
for(i in 1:50){
lastNames[i] <- x[[i]][2]
position[i] <- x[[i]][length(x[[i]])]
team[i] <- x[[i]][(length(x[[i]])-2)]
}
df3 <- data.frame("Name" = lastNames, "Pos" = position,'Team'=toupper(team), "Proj" = tab$Proj, "AvgCost"= tab$Avg)
r <- getURL(paste0("https://football.fantasysports.yahoo.com/f1/draftanalysis?tab=AD&pos=ALL&sort=DA_AP&count=100"))
tables <- readHTMLTable(r)
tables <- list.clean(tables, fun = is.null, recursive=F)
tab <- as.data.frame(tables)
names(tab) <- c("Name", "Proj", "Avg", "drop")
tab <- tab %>% select(-("drop"))
tab$Proj <- as.numeric(gsub("\\$", "",as.character(tab$Proj)))
tab$Avg <- as.numeric(gsub("\\$", "",as.character(tab$Avg)))
test <- tables$draftanalysistable$Name
start <- gregexpr('\n', test) %>% unlist()
start <- start[seq(1,length(start), 5)]
stop <- gregexpr('- ', test) %>% as.numeric()
x <- strsplit(substring(test, start+2, stop+3) %>% trimws(), " ")
lastNames <- character()
position <- character()
team <- character()
for(i in 1:50){
lastNames[i] <- x[[i]][2]
position[i] <- x[[i]][length(x[[i]])]
team[i] <- x[[i]][(length(x[[i]])-2)]
}
df4 <- data.frame("Name" = lastNames, "Pos" = position,'Team'=toupper(team), "Proj" = tab$Proj, "AvgCost"= tab$Avg)
#Join with ADP
df <- rbind(df,df3,df4)
df
df2 <- read_csv("fantasypros.csv") %>% as.data.frame() %>% select('Overall', 'Avg', 'Pos', 'Team')
X <- strsplit(df2$Overall, " ")
Name <- character()
for(i in 1:nrow(df2)){
Name[i] <-  X[[i]][2]
}
df2$Pos <- substring(df2$Pos,1,2)
df2$Name <- Name
df$Name <- as.character(df$Name)
df$Pos <- as.character(df$Pos)
df$Team <- as.character(df$Team)
df2 <- df2 %>% mutate(Team = ifelse(Team== 'JAC', 'JAX', Team))
DF <- left_join(df2, df, by=c("Name", "Pos", "Team")) %>% arrange(Avg) %>% mutate(Pos = ifelse(Pos=='DS', 'D', Pos))
dfs <- DF %>% select(Overall, Pos, Avg, AvgCost)
names(dfs) <- c("Name", "Position", "Points", "Salary")
View(df)
View(dfs)
